# List of stages for jobs, and their order of execution
stages:
  - Build
  - Package
  - Publish
  - Deploy

variables:
  # Globel level variables. (Will be applied to all jobs)
  IMAGE_NAME:
    value: "protein-app"
    description: "App name"

  DOCKER_HOST:
    value: "tcp://docker:2375"
    description: "To be used in Dind confs"

  DOCKER_TLS_CERTDIR:
    value: ""
    description: "Ignore tls cert"

Compile:
  stage: Build
  image:
    name: node:18.6.0-alpine3.16
    pull_policy: if-not-present
  before_script:
    - cd ./docker/app
  script:
    - npm ci --only=prod
    - npm run build
  # Remove parent directories so that artifact archive will contain only the base directory.
  after_script:
    - mv ./docker/app/build ./build
  artifacts:
    when: on_success
    name: protein-app-build
    # This configuration requires a modification in Dockerfile.prod. (Check Dockerfile.prod > COPY commands)
    paths:
      - ./build
    expire_in: 1 days

Containerize:
  stage: Package
  image:
    name: docker:20.10.17-alpine3.16 # currently same size as "docker:latest" latest docker
    pull_policy: if-not-present
  services:
    - docker:dind
  dependencies:
    - Compile
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  script:
    - docker build -f docker/Dockerfile.prod --cache-from $CI_REGISTRY_IMAGE/$IMAGE_NAME:latest -t $CI_REGISTRY_IMAGE/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA -t $CI_REGISTRY_IMAGE/$IMAGE_NAME:latest .
    - docker push -a $CI_REGISTRY_IMAGE/$IMAGE_NAME
  after_script:
    - docker logout

Push to ECR:
  stage: Publish
  image:
    name: amazon/aws-cli:latest
    # Unset default entrypoint of the image which is "aws"
    entrypoint: [""]
    pull_policy: if-not-present
  services:
    - docker:dind
  variables:
    SOURCE_IMAGE: $CI_REGISTRY_IMAGE/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA
    RELEASE_IMAGE: $AWS_ECR_REPOSITORY/$IMAGE_NAME
  dependencies:
    - Containerize
  before_script:
    - amazon-linux-extras install docker
    - echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - docker pull $SOURCE_IMAGE
    - docker tag $SOURCE_IMAGE $RELEASE_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker tag $SOURCE_IMAGE $RELEASE_IMAGE:latest
  script:
    - aws ecr get-login-password | docker login $AWS_ECR_REPOSITORY --username AWS --password-stdin
    - docker push -a $RELEASE_IMAGE
  after_script:
    - docker logout

Deploy Terraform Stack:
  stage: Deploy
  trigger:
    include:
      - local: .gitlab/tf-deploy.yml
