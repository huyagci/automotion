# List of stages for jobs, and their order of execution
stages:
  - Build
  - Package
  - Publish
  - Trigger Deploy

variables:
  # Globel level variables. (Will be applied to all jobs)
  DOCKER_HOST:
    value: "tcp://docker:2375"
    description: "To be used in Dind confs"

  DOCKER_TLS_CERTDIR:
    value: ""
    description: "Ignore tls cert"

Compile:
  stage: Build
  image: node:18.6.0-alpine3.16
  before_script:
    - cd ./docker/app
  script:
    - npm ci --only=prod
    - npm run build
  after_script:
    - mv ./docker/app/build ./build
  artifacts:
    when: on_success
    name: protein-app-build
    paths:
      - ./build

Containerize:
  stage: Package
  image: 20.10.17-alpine3.16 # currently same size as "docker:latest"
  services:
    - docker:dind
  dependencies:
    - Compile
  before_script:
    #! artifacts moved to root dir
    - cd ./docker
    - echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  script:
    - docker build -f Dockerfile.prod --cache-from $CI_REGISTRY/protein-app:latest -t $CI_REGISTRY/protein-app:$CI_COMMIT_SHORT_SHA -t $CI_REGISTRY/protein-app:latest .
    - docker push -a $CI_REGISTRY/protein-app
  after_script:
    - docker logout

Push to ECR:
  stage: Publish
  image:
    name: amazon/aws-cli
    # Unset default entrypoint of the image which is "aws"
    entrypoint: [""]
  services:
    - docker:dind
  variables:
    IMAGE_NAME: protein-app
    SOURCE_IMAGE: $CI_REGISTRY/protein-app:$CI_COMMIT_SHORT_SHA
    RELEASE_IMAGE: $ECR_REPOSITORY/$IMAGE_NAME
    VERSION_TAG: $CI_COMMIT_SHORT_SHA
    LATEST_TAG: latest
  dependencies:
    - Containerize
  before_script:
    - amazon-linux-extras install docker
    - echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - docker pull $SOURCE_IMAGE
    - docker tag $SOURCE_IMAGE $RELEASE_IMAGE:$VERSION_TAG
    - docker tag $SOURCE_IMAGE $RELEASE_IMAGE:$LATEST_TAG
  script:
    - aws ecr-public get-login-password | docker login $ECR_REPOSITORY --username AWS --password-stdin
    - docker push -a $RELEASE_IMAGE
  after_script:
    - docker logout

Deploy with Terraform:
  stage: Trigger Deploy
  trigger:
    include:
      - local: .gitlab/tf-deploy.yml
